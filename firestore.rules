
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Data ---
    // These rules apply to the 'favorites' and 'wishlist' subcollections
    // stored under each user's document in the 'users' collection.

    // Rule for the 'favorites' subcollection:
    // - A user can read their own favorites.
    // - A user can add/remove anime from their own favorites.
    match /users/{userId}/favorites/{animeId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rule for the 'wishlist' subcollection:
    // - A user can read their own wishlist.
    // - A user can add/remove anime from their own wishlist.
    match /users/{userId}/wishlist/{animeId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Optional: If you store general user profile information directly under /users/{userId}
    // (e.g., display name, email, photo URL that is not managed by Firebase Auth directly but by your app)
    // match /users/{userId} {
    //   // Allow a user to read their own profile.
    //   // For public profiles, you might change this to `allow read: if true;` or `allow read: if request.auth != null;`
    //   allow read: if request.auth != null && request.auth.uid == userId;
    //   // Allow a user to write to (update) their own profile.
    //   allow write: if request.auth != null && request.auth.uid == userId;
    // }


    // --- General App Data (Examples for future use) ---

    // Example: If you were to store anime information directly in Firestore
    // instead of using mock data.
    // match /animes/{animeId} {
    //   // Allow anyone (even unauthenticated users) to read anime details.
    //   allow read: if true;
    //
    //   // Disallow direct client-side writes to the 'animes' collection.
    //   // Anime data should ideally be managed by an admin interface or backend functions.
    //   allow write: if false; // Or implement admin-only access: request.auth.token.admin == true
    // }

    // Example: If you had a 'comments' collection for anime.
    // match /animes/{animeId}/comments/{commentId} {
    //   // Allow anyone to read comments.
    //   allow read: if true;
    //   // Allow authenticated users to create comments.
    //   allow create: if request.auth != null;
    //   // Allow a user to update or delete their own comments.
    //   allow update, delete: if request.auth != null && resource.data.authorUid == request.auth.uid;
    // }

    // --- Default Behavior ---
    // By default, all paths not explicitly matched by a rule are denied access.
    // This is a secure default posture.
  }
}
